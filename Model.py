import joblib
from sklearn.metrics import classification_report, confusion_matrix

class Model:
    def __init__(self):
        self.model = None

    def load_model(self, model_file):
        with open(model_file, 'rb') as file:
            self.model = joblib.load(file)

    def train_model(self, X_train, y_train):
        self.model.fit(X_train, y_train)

    def retrain_model(self, new_X_train, new_y_train):
        # Retraining by adding new data to existing model
        self.model.partial_fit(new_X_train, new_y_train)

    def make_prediction(self, X):
        return self.model.predict(X)

    def get_features(self):
        return self.model.feature_names_in_
    
    def get_parameters(self):
        model_params = self.model.get_params()
        print("Model Parameters:")
        for param_name, param_value in model_params.items():
            print(f"{param_name}: {param_value}")

    def get_metric(self, X_test, y_test):
        # Make predictions using the loaded model
        y_pred = self.make_prediction(X_test)

        # Calculate the confusion matrix
        print(confusion_matrix(y_test, y_pred))

        # Calculate the classification report
        print(classification_report(y_test, y_pred))