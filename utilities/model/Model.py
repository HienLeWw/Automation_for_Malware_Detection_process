import joblib
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.models import load_model
import keras
#from keras.models import load_model
from keras.models import Model as M
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import os
from tensorflow.keras.optimizers import Adam

class Model:
    def __init__(self):
        self.model = None
        self.new_data = None
        self.accuracy = None

    def load_model(self, model_file):
        # process sklearn ML model (RF)
        if '.pkl' in model_file.lower():
            with open(model_file, 'rb') as file:
                self.model = joblib.load(file)
                print("Model loaded successfully!")
                print(type(self.model))

        # process deep learning model (CNN)
        elif '.h5' in model_file.lower() or '.keras' in model_file.lower():
            self.model = load_model(model_file) # , custom_objects={'Custom>Adam': Adam})
            print(type(self.model))
            print("Model loaded successfully!")
            
        else:
            print("Incorrect model file format!")
            exit(0)

    def train_model(self, X_train, y_train):
        self.model.fit(X_train, y_train)

    def load_feature_list(self, filename='/utilities/model/feature_list.joblib'):
        print(os.getcwd())
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        filename = os.path.join(project_root, 'utilities', 'model', 'feature_list.joblib')
        return joblib.load(filename)
        # return joblib.load(os.getcwd())

    def prepare_new_data(self, new_data, old_feature_list):
        prepared_data = pd.DataFrame(columns=old_feature_list)        
        for feature in old_feature_list:
            if feature in new_data.columns:
                prepared_data[feature] = new_data[feature]
            else:
                prepared_data[feature] = 0
        
        return prepared_data

    def retrain_model(self, new_data_path):
        self.new_data = pd.read_csv(new_data_path)

        s = (self.new_data.dtypes == 'object')
        object_cols = list(s[s].index)

        le = LabelEncoder()
        for col in object_cols:
             self.new_data[col] = le.fit_transform(self.new_data[col].astype('str'))
        
        
        old_feature_list = self.load_feature_list()
        
        self.new_data = self.prepare_new_data(self.new_data, old_feature_list)
        print(self.new_data.shape)

    def make_prediction(self, X):
        return self.model.predict(X)

    def get_features(self):
        return self.model.feature_names_in_
    
    def get_parameters(self):
        model_params = self.model.get_params()
        print("Model Parameters:")
        for param_name, param_value in model_params.items():
            print(f"{param_name}: {param_value}")

    def get_metric(self, X_test, y_test):
        # Make predictions using the loaded model
        y_pred = self.make_prediction(X_test)

        # Calculate the confusion matrix
        print(confusion_matrix(y_test, y_pred))

        # Calculate the classification report
        print(classification_report(y_test, y_pred))
