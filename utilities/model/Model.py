import joblib
from sklearn.metrics import classification_report, confusion_matrix
# from tensorflow.keras.models import load_model
import keras
from keras.models import load_model

class Model:
    def __init__(self):
        self.model = None

    def load_model(self, model_file):
        # process sklearn ML model (RF)
        if '.pkl' in model_file.lower():
            with open(model_file, 'rb') as file:
                self.model = joblib.load(file)
                print("Model loaded successfully!")
                print(type(self.model))

        # process deep learning model (CNN)
        elif '.h5' in model_file.lower() or '.keras' in model_file.lower():
            self.model = load_model(model_file)
            print(type(self.model))
            print("Model loaded successfully!")
            
        else:
            print("Incorrect model file format!")
            exit(0)

    def train_model(self, X_train, y_train):
        self.model.fit(X_train, y_train)

    def retrain_model(self, new_data_path):
        pass

    def make_prediction(self, X):
        return self.model.predict(X)

    def get_features(self):
        return self.model.feature_names_in_
    
    def get_parameters(self):
        model_params = self.model.get_params()
        print("Model Parameters:")
        for param_name, param_value in model_params.items():
            print(f"{param_name}: {param_value}")

    def get_metric(self, X_test, y_test):
        # Make predictions using the loaded model
        y_pred = self.make_prediction(X_test)

        # Calculate the confusion matrix
        print(confusion_matrix(y_test, y_pred))

        # Calculate the classification report
        print(classification_report(y_test, y_pred))