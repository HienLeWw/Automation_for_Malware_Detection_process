import joblib
from sklearn.metrics import classification_report, confusion_matrix
from utilities.model.Model import *
# import tensorflow as tf
import keras
from keras.layers import Dense,Flatten,GlobalAveragePooling1D,Input,Conv1D,MaxPooling1D,Dropout,BatchNormalization,Convolution1D,AveragePooling1D,Conv2D,MaxPooling2D
from keras.utils import to_categorical
from keras.models import Sequential
from keras.callbacks import CSVLogger, ModelCheckpoint, EarlyStopping, Callback
from sklearn.metrics import confusion_matrix, f1_score, accuracy_score, classification_report, mean_absolute_error
from sklearn.metrics import precision_score, recall_score, accuracy_score
import numpy as np
import pandas as pd

class CNN_Model(Model):
    def __init__(self):
        self.model = None
    
    def retrain_model(self, new_data_path):
        new_data = pd.read_csv(new_data_path)
        y_train = new_data['label']
        print(new_data['label'].value_counts())

        X_train = new_data.drop(columns='label',axis=1)

        X_train_cnn = X_train.iloc[:, :-1].values
        y_train_cnn = to_categorical(y_train, num_classes=2)

        for layer in self.model.layers:
            layer.trainable = False

        # Compile the model with binary_crossentropy loss
        # self.model.compile(optimizer='adam', loss='binary_crossentropy', metrics=[Accuracy()])

        early_stop = EarlyStopping(monitor='loss',  mode='min',  patience=10, restore_best_weights=True)
        self.model.fit(X_train_cnn, y_train_cnn, epochs=50, batch_size=16, callbacks=[early_stop])

    def get_metric(self, test_data_path):
        new_data = pd.read_csv(test_data_path)
        y_test = new_data['label']
        X_test = new_data.drop(columns='label',axis=1)

        X_test_cnn = X_test.iloc[:, :-1].values

        preds = self.model.predict(X_test_cnn, batch_size=16)

        # Tính toán kết quả
        y_pred = np.argmax(preds, axis=1)

        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
        recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
        f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

        print('Accuracy: %s\nPrecision: %s\nRecal: %s\nF1-Score: %s' %(accuracy, precision, recall, f1))

        
    def get_parameters(self):
        print(self.model.summary())