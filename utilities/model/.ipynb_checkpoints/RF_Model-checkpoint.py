from sklearn.metrics import classification_report, confusion_matrix

class RF_Model:
    def __init__(self):
        self.model = None

    def retrain_model(self, new_data_path):
        # Retraining by adding new data to existing model
        # self.model.partial_fit(new_X_train, new_y_train)
        new_data = pd.read_csv(new_data_path)
        y_train = new_data['label']
        print(new_data['label'].value_counts())
        X_train = new_data.drop(columns='label',axis=1)

        # self.model.partial_fit(X_train, y_train)
        self.model.fit(X_train, y_train)


    def make_prediction(self, X):
        return self.model.predict(X)

    def get_features(self):
        return self.model.feature_names_in_
    
    def get_parameters(self):
        model_params = self.model.get_params()
        print("RF Model Parameters:")
        for param_name, param_value in model_params.items():
            print(f"{param_name}: {param_value}")

    def get_metric(self, test_data_path):
        # Make X, y from test data
        new_data = pd.read_csv(test_data_path)
        y_test = new_data['label']
        X_test = new_data.drop(columns='label',axis=1)

        # Make predictions using the loaded model
        y_pred = self.make_prediction(X_test)

        # Calculate the confusion matrix
        print("Confusion matrix:\n")
        print(confusion_matrix(y_test, y_pred))

        # Calculate the classification report
        print(classification_report(y_test, y_pred))