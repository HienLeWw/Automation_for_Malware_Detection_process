import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA, FastICA
from sklearn.manifold import TSNE

class DATASET:
    def __init__(self, file_path):
        self.file_path = file_path
        self.data = None
        self.labels = None

    def load_dataset(self):
        try:
            print(self.file_path)
            self.data = pd.read_csv(self.file_path)
            if 'label' in self.data.columns:
                self.labels = self.data['label']
                # self.data = self.data.drop(columns=['label'])
            print(f"Dataset loaded successfully from {self.file_path}")
        except Exception as e:
            print(f"Failed to load dataset: {e}")

    def process(self):
        if self.data is not None:
            print("Processing dataset...")
            # Fill missing values with 0
            self.data.fillna(0, inplace=True)
            # Normalize the dataset
            scaler = StandardScaler()
            self.data = pd.DataFrame(scaler.fit_transform(self.data), columns=self.data.columns)
        else:
            print("No data to process. Please load the dataset first.")

    def visualize(self):
        if self.data is not None and self.labels is not None:
            print("Visualizing dataset with PCA:")
            y = self.data['label']
            X = self.data.drop(columns='label')

            # PCA
            pca = PCA(n_components=2)
            X_pca = pca.fit_transform(X)

            print("Visualizing dataset with t-SNE:")
            # t-SNE
            tsne = TSNE(n_components=2, random_state=42)
            X_tsne = tsne.fit_transform(X)

            # ICA
            print("Visualizing dataset with ICA:")
            ica = FastICA(n_components=2, random_state=42)
            X_ica = ica.fit_transform(X)

            # Plotting
            fig, ax = plt.subplots(1, 3, figsize=(18, 6))

            # PCA Plot
            ax[0].scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', edgecolor='k', s=50)
            ax[0].set_title('PCA')
            ax[0].set_xlabel('Principal Component 1')
            ax[0].set_ylabel('Principal Component 2')

            # t-SNE Plot
            ax[1].scatter(X_tsne[:, 0], X_tsne[:, 1], c=y, cmap='viridis', edgecolor='k', s=50)
            ax[1].set_title('t-SNE')
            ax[1].set_xlabel('Dimension 1')
            ax[1].set_ylabel('Dimension 2')

            # ICA Plot
            ax[2].scatter(X_ica[:, 0], X_ica[:, 1], c=y, cmap='viridis', edgecolor='k', s=50)
            ax[2].set_title('ICA')
            ax[2].set_xlabel('Independent Component 1')
            ax[2].set_ylabel('Independent Component 2')

            plt.show()

        else:
            print("No data to visualize or labels are missing. Please load and process the dataset first.")

    def get_summary(self):
        if self.data is not None:
            return self.data.describe()
        else:
            print("No data available. Please load the dataset first.")
            return None

    def get_head(self, n=5):
        if self.data is not None:
            return self.data.head(n)
        else:
            print("No data available. Please load the dataset first.")
            return None

    def save_dataset(self, output_path):
        if self.data is not None:
            try:
                self.data.to_csv(output_path, index=False)
                print(f"Dataset saved successfully to {output_path}")
            except Exception as e:
                print(f"Failed to save dataset: {e}")
        else:
            print("No data to save. Please load and process the dataset first.")