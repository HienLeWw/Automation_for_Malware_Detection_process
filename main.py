import os
import shutil
import subprocess
import sys
import glob
import json
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from Model import *
from Sample import *
from Dataset import *
import argparse

# Make prediction
def make_predict(input_path, trained_rf_model):
    print("Analysis...")
    
    # Match the sample features with model features
    model_features = trained_rf_model.get_features()
    input_sample = pd.read_csv(input_path)
    new_cols = set(model_features) - set(input_sample.columns)
    for column in new_cols:
        input_sample = input_sample.assign(**{column: 0})

    # Label encode
    s = (input_sample.dtypes == 'object')
    object_cols = list(s[s].index)

    le = LabelEncoder()
    for col in object_cols:
        input_sample[col] = le.fit_transform(input_sample[col].astype('str'))
    input_sample = input_sample[model_features]

    result = trained_rf_model.make_prediction(input_sample)
    if result[0] == 0:
        print("Output: Benign")
    else:
        print("Output: Malware")

def process_dataset():
    pass
    

def main():
    parser = argparse.ArgumentParser(description='Automation For Android Malware Detection Process Framework')
    # parser.add_argument('-p', '--apk', required=True, type=str, help='Path to the APK file to be processed')
    # parser.add_argument('-m', '--model', required=True, type=str, help='Path to the trained model file')
    # parser.add_argument('-v', '--visualize', required=True, type=str, help='Path to dataset for visualization')
    # parser.add_argument('-s', '--summarize', required=True, type=str, help='Path to dataset for summary')
    parser.add_argument('-p', '--apk', type=str, help='Path to the APK file to be processed')
    parser.add_argument('-m', '--model', type=str, help='Path to the trained model file')
    parser.add_argument('-d', '--dataset', type=str, help='Path to the dataset file')
    parser.add_argument('-v', '--visualize', action='store_true', help='Visualize the dataset with PCA')
    parser.add_argument('-s', '--summarize', action='store_true', help='Summarize the dataset')

    args = parser.parse_args()
    print(args)

    if args.apk and args.model:
        apk_file_path = args.apk
        model_path = args.model

        trained_rf_model = Model()
        trained_rf_model.load_model(model_path)

        dataset = Sample(apk_file_path)
        sample = dataset.load_sample()
        print(sample)
        make_predict(sample, trained_rf_model)
    elif args.dataset:
        dataset = DATASET(args.dataset)
        dataset.load_dataset()
        dataset.process()
        if args.visualize:
            dataset.visualize()
        if args.summarize:
            print(dataset.get_summary())
    else:
        print("You must provide either both -p and -m for APK processing or -d with optional -v and -s for dataset processing.")
        parser.print_help()

if __name__ == "__main__":
    main()
