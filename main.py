import os
import shutil
import subprocess
import sys
import glob
import json
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import joblib

# Process APK file with Andropytool
def process_apk_with_docker(apk_folder, additional_arguments="-fw"):
    # Replace backslashes with forward slashes in the path
    apk_folder = apk_folder.replace("\\", "/")
    docker_command = f"docker run --volume={apk_folder}:/apks alexmyg/andropytool -s /apks/ {additional_arguments}"
    print(f"Running Docker command: {docker_command}")
    subprocess.run(docker_command, shell=True)

# Extract static feature and convert to csv
def extract_static_feature(json_output_folder):
    os.chdir(json_output_folder)
    files = glob.glob(json_output_folder+"/OUTPUT*.json")
    df = pd.DataFrame()
    for file_name in files:
        print(file_name)
        with open(file_name) as file:
            print("I'm here!")
            data = json.load(file)
            #print(1)
            #print(data)
            print(file_name)
            df = pd.DataFrame(data)
            df = df.transpose()
    print(df.columns)
    static_smort = pd.DataFrame()

    for cols in df.columns:
        if cols == 'Static_analysis':
            rows = df[cols].values
            dumb = pd.DataFrame()
            for row in rows:
                row = pd.json_normalize(row)
                dumb = pd.concat([dumb,pd.DataFrame(row)])

            static_smort = pd.concat([static_smort, dumb.transpose()])
    static_smort = static_smort.transpose()
    important_features = ["Permissions", "Services", "Opcodes", "Receivers", "API calls", "API Packages", "System commands", "FlowDroid", "Activities"]
    
    # Drop strings cols
    strings_col = []
    for col in static_smort.columns:
        if 'strings' in col.lower():
            strings_col.append(col)
    print(len(strings_col))
    static_smort.drop(columns=strings_col,inplace=True)

    remain_features = []
    cpy = static_smort.copy()
    for feature in important_features:
        for col in cpy.columns:
            if feature.lower() in col.lower():
                remain_features.append(col)
                cpy.drop(columns=col,inplace=True)
    print(len(remain_features))
    final_static_data = static_smort.copy()
    final_static_data = final_static_data[remain_features]
    final_static_data.to_csv("static.csv",index=False)

    # Reduce missing value cols    
    num_rows = final_static_data.shape[0]
    missing_val_cols = [col for col in final_static_data.columns if final_static_data[col].isna().sum()>(num_rows*8/10)]
    print(len(missing_val_cols))
    cleaned_data = final_static_data.drop(columns=missing_val_cols)
    cleaned_data = cleaned_data.fillna(0)
    cleaned_data.to_csv(f"reduced_static.csv",index=False)
    files = glob.glob(json_output_folder+"/*.csv")
    print(files)
    return files

# Make prediction
def make_predict(input_path):
    print("Analysis...")
    trained_rf_model = joblib.load("/home/kali/Desktop/IEC/trained_rf_model_boruta.pkl")
    
    # Match the sample features with model features
    model_features = trained_rf_model.feature_names_in_
    input_sample = pd.read_csv(input_path)
    new_cols = set(model_features) - set(input_sample.columns)
    for column in new_cols:
        input_sample = input_sample.assign(**{column: 0})

    # Label encode
    s = (input_sample.dtypes == 'object')
    object_cols = list(s[s].index)

    le = LabelEncoder()
    for col in object_cols:
        input_sample[col] = le.fit_transform(input_sample[col].astype('str'))
    input_sample = input_sample[model_features]

    result = trained_rf_model.predict(input_sample)
    if result[0] == 0:
        print("Output: Benign")
    else:
        print("Output: Malware")
    

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 script.py <APK_file_path>")
        sys.exit(1)

    # Get APK file from input argument
    specific_apk_file = r'' + sys.argv[1]

    # Define output folder
    output_folder = os.path.dirname(os.path.abspath(specific_apk_file))

    # Extract APK name without extension
    apk_name = os.path.splitext(os.path.basename(specific_apk_file))[0]
    
    # Create a folder for the APK in the output folder
    output_subfolder = os.path.join(output_folder, apk_name)
    os.makedirs(output_subfolder, exist_ok=True)

    # Move APK to output folder
    shutil.move(specific_apk_file, output_subfolder)

    # Extract json feature
    process_apk_with_docker(output_subfolder, "-fw")

    # Get json feature file
    json_files_path = "Features_files"
    input_json_folder = os.path.join(output_subfolder, json_files_path)
    json_file_pattern = "OUTPUT_ANDROPY_"
    json_files = [f for f in os.listdir(input_json_folder) if f.startswith(json_file_pattern)]
    
    json_file = json_files[0]
    json_file_path = os.path.join(input_json_folder)

    # Create a new folder within the output_folder for the JSON file
    json_output_folder = os.path.join(output_folder, "output")
    os.makedirs(json_output_folder, exist_ok=True)

    # Move the JSON file to the new output folder
    shutil.move(json_file_path, json_output_folder)

    # Extract static features
    json_output_folder = os.path.join(json_output_folder,"Features_files")
    print(json_output_folder)
    sample = extract_static_feature(json_output_folder)
    
    make_predict(sample[0])


