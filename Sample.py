import os
import shutil
import subprocess
import sys
import glob
import json
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import joblib

class Sample:
    def __init__(self, apk_file_path):
        self.apk_file_path = apk_file_path
        self.apk_name = os.path.splitext(os.path.basename(self.apk_file_path))[0]
        self.output_folder = os.path.join(os.getcwd(), 'new_samples')
        # self.json_output_folder = os.path.join(self.output_folder, 'Features_files')
        self.apk_folder = os.path.join(self.output_folder, self.apk_name)
        self.json_output_folder = os.path.join(self.apk_folder, 'Features_files')

    def process_apk(self, additional_arguments="-fw"):
        # apk_folder = os.path.dirname(os.path.abspath(self.apk_file_path))
        #apk_name = os.path.splitext(os.path.basename(self.apk_file_path))[0]
        #self.output_folder = os.path.join(apk_folder, apk_name)
        #os.makedirs(self.output_folder, exist_ok=True)
        shutil.move(self.apk_file_path, self.output_folder)
        # new_apk_folder = os.path.join(self.output_folder, self.apk_name)
        os.makedirs(self.apk_folder, exist_ok=True)
        self.apk_file_path = self.apk_folder +".apk"
        shutil.move(self.apk_file_path, self.apk_folder)
        # apk_folder = self.output_folder.replace("\\", "/")
        self.apk_file_path = self.apk_file_path.replace("\\", "/")
        # shutil.move(self.apk_file_path, output_subfolder)
        docker_command = f"docker run --volume={self.apk_folder}:/apks alexmyg/andropytool -s /apks/ {additional_arguments}"
        print(f"Running Docker command: {docker_command}")
        subprocess.run(docker_command, shell=True)

    def extract_static_feature(self):
        #self.json_output_folder = os.path.join(self.output_folder, "Features_files")
        #os.makedirs(self.json_output_folder, exist_ok=True)
        os.chdir(self.json_output_folder)
        files = glob.glob(self.json_output_folder + "/OUTPUT*.json")
        # files = glob.glob(self.json_output_folder + "/" + self.apk_name + "*.json")
        df = pd.DataFrame()
        for file_name in files:
            with open(file_name) as file:
                data = json.load(file)
                df = pd.DataFrame(data)
                # print(df)
                df = df.transpose()
                # print(df)
        static_smort = pd.DataFrame()

        for cols in df.columns:
            print(cols)
            if cols == 'Static_analysis':
                rows = df[cols].values
                dumb = pd.DataFrame()
                for row in rows:
                    row = pd.json_normalize(row)
                    dumb = pd.concat([dumb, pd.DataFrame(row)])
                static_smort = pd.concat([static_smort, dumb.transpose()])
        static_smort = static_smort.transpose()
        important_features = ["Permissions", "Services", "Opcodes", "Receivers", "API calls", "API Packages", "System commands", "FlowDroid", "Activities"]
        
        strings_col = []
        for col in static_smort.columns:
            if 'strings' in col.lower():
                strings_col.append(col)
        static_smort.drop(columns=strings_col, inplace=True)

        remain_features = []
        cpy = static_smort.copy()
        for feature in important_features:
            for col in cpy.columns:
                if feature.lower() in col.lower():
                    remain_features.append(col)
                    cpy.drop(columns=col, inplace=True)
        final_static_data = static_smort[remain_features]
        final_static_data.to_csv(self.apk_name+".csv", index=False)

    def load_sample(self):
        self.process_apk()
        self.extract_static_feature()
        return os.path.join(self.json_output_folder, self.apk_name+".csv")